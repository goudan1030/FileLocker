//
//  FileLockerMain.swift
//  FileLocker
//
//  Created by zwd on 2025/5/6.
//

import SwiftUI
import SwiftData
import UniformTypeIdentifiers
import Foundation
import AppKit

// 内联定义所有必需的类型，避免导入问题

// 步骤视图组件 
struct StepView: View {
    let number: Int
    let text: String
    
    var body: some View {
        HStack(alignment: .center, spacing: 15) {
            // 步骤编号圆圈
            ZStack {
                Circle()
                    .fill(Color.blue.opacity(0.1))
                    .frame(width: 36, height: 36)
                
                Text("\(number)")
                    .font(.system(size: 16, weight: .bold))
                    .foregroundColor(.blue)
            }
            
            // 步骤文本
            Text(text)
                .font(.system(size: 16))
                .foregroundColor(.primary)
                .fixedSize(horizontal: false, vertical: true) // 允许文本换行
            
            Spacer()
        }
    }
}

// 文件锁定错误
enum FileLockError: Error, LocalizedError {
    case fileNotFound
    case accessDenied
    case unknown(String)
    case bookmarkCreationFailed
    case bookmarkRestorationFailed
    
    var errorDescription: String? {
        switch self {
        case .fileNotFound:
            return "找不到文件，可能已被移动或删除"
        case .accessDenied:
            return "没有足够权限操作该文件，请检查是否已获得完全磁盘访问权限"
        case .bookmarkCreationFailed:
            return "创建文件书签失败，无法持久访问文件"
        case .bookmarkRestorationFailed:
            return "文件书签已失效，无法访问该文件"
        case .unknown(let message):
            return "未知错误: \(message)"
        }
    }
}

// 文件访问助手
class FileLockerAccessHelper {
    static let shared = FileLockerAccessHelper()
    private let hasShownAccessPromptKey = "hasShownBookmarkAccessPrompt"
    
    private init() {}
    
    var hasShownAccessPrompt: Bool {
        get { return UserDefaults.standard.bool(forKey: hasShownAccessPromptKey) }
        set { UserDefaults.standard.set(newValue, forKey: hasShownAccessPromptKey) }
    }
    
    // 检查是否有足够的文件访问权限
    func hasFileAccess() -> Bool {
        // 在沙盒中，我们只能通过用户交互来获取文件权限
        // 此函数主要用于UI显示，真正的权限检查在文件操作时进行
        return true
    }
    
    // 打开指定的系统设置面板
    func openSystemSettings(panel: String) {
        if let url = URL(string: "x-apple.systempreferences:\(panel)") {
            NSWorkspace.shared.open(url)
        }
    }
    
    // 显示沙盒限制提示
    func showSandboxLimitations() {
        // 简化实现
        print("显示沙盒限制说明")
    }
}

// 设置视图
struct SettingsFullDiskAccessView: View {
    @Binding var isPresented: Bool
    @Environment(\.colorScheme) private var colorScheme
    
    var body: some View {
        VStack(spacing: 0) {
            // 顶部图标区域
            ZStack {
                Circle()
                    .fill(LinearGradient(colors: [.blue.opacity(0.8), .teal], 
                                        startPoint: .topLeading, 
                                        endPoint: .bottomTrailing))
                    .frame(width: 100, height: 100)
                    .shadow(color: .black.opacity(0.2), radius: 8, x: 0, y: 5)
                
                Image(systemName: "folder.badge.gearshape")
                    .font(.system(size: 50))
                    .foregroundColor(.white)
            }
            .padding(.top, 40)
            .padding(.bottom, 20)
            
            // 标题区域
            Text("完全磁盘访问权限")
                .font(.system(size: 28, weight: .bold))
                .padding(.bottom, 10)
            
            // 说明文本
            Text("FileLocker需要完全磁盘访问权限才能锁定和保护您的重要文件。")
                .font(.system(size: 16))
                .foregroundColor(.secondary)
                .multilineTextAlignment(.center)
                .padding(.horizontal, 40)
                .padding(.bottom, 30)
            
            // 按钮区域
            HStack(spacing: 20) {
                Button("稍后再说") {
                    isPresented = false
                }
                .buttonStyle(.borderedProminent)
                .buttonBorderShape(.capsule)
                .tint(.gray.opacity(0.3))
                
                Button("前往系统设置") {
                    FileLockerAccessHelper.shared.openSystemSettings(panel: "Security")
                    isPresented = false
                }
                .buttonStyle(.borderedProminent)
                .buttonBorderShape(.capsule)
                .tint(.blue)
            }
            .padding(.bottom, 40)
        }
        .frame(width: 550)
        .background(Color(NSColor.windowBackgroundColor))
        .clipShape(RoundedRectangle(cornerRadius: 20))
        .shadow(color: .black.opacity(0.2), radius: 20, x: 0, y: 10)
    }
}

// 文件服务
class FileLockerService {
    static let shared = FileLockerService()
    
    private init() {}
    
    // 锁定文件
    func lockFile(at path: String, withBookmark bookmark: Data?) throws {
        // 简化实现
        print("锁定文件: \(path)")
    }
    
    // 解锁文件
    func unlockFile(at path: String, withBookmark bookmark: Data?) throws {
        // 简化实现
        print("解锁文件: \(path)")
    }
    
    // 创建安全书签
    func createSecureBookmark(for url: URL) throws -> Data {
        // 简化实现
        return "bookmark".data(using: .utf8) ?? Data()
    }
    
    // 检查文件是否已锁定
    func isFileLocked(at path: String) -> Bool {
        return false // 简化实现
    }
}

// 锁定文件模型
@Model
final class LockedFile {
    var path: String
    var isLocked: Bool
    var isDirectory: Bool
    var name: String
    var lockDate: Date
    var bookmark: Data? // 添加书签数据以便持久访问文件
    
    init(path: String, isLocked: Bool = true, isDirectory: Bool = false, bookmark: Data? = nil) {
        self.path = path
        self.isLocked = isLocked
        self.isDirectory = isDirectory
        self.name = URL(fileURLWithPath: path).lastPathComponent
        self.lockDate = Date()
        self.bookmark = bookmark
    }
}

// MARK: - 以下为主应用代码
